const colors = require("chalk");
const path = require("path");

const fs = require("fs");

const { CPP_SRC_FOLDER_PATH } = require("./utils");

const INCLUDE_REGEX = /^#\s*include\s+["<](.+)[">]/;
const ROARING_VERSION_REGEX = /#\s*define\s+ROARING_VERSION\s+"(.+)"/;

module.exports.unity = function unity() {
  const existsCache = new Map();

  const exists = (filePath) => {
    let result = existsCache.get(filePath);
    if (result !== undefined) {
      return result;
    }
    result = fs.existsSync(filePath);
    existsCache.set(filePath, result);
    return result;
  };

  const includedFiles = new Set();
  let roaringVersion = null;

  const output = ['// This file is generated by "scripts/build.js". Do not edit it directly.', ""];

  function processFile(filePath) {
    const content = fs.readFileSync(filePath, "utf8");
    for (const line of content.split("\n")) {
      const includeMatch = line.match(INCLUDE_REGEX);
      if (includeMatch) {
        const includeName = includeMatch[1];

        let includePath;
        if (includeName.startsWith("roaring/") && line.includes("<")) {
          includePath = path.resolve(__dirname, "../../submodules/CRoaring/include", includeName);
        } else {
          includePath = path.resolve(path.dirname(filePath), includeName);
        }
        if (exists(includePath)) {
          if (!includedFiles.has(includePath)) {
            output.push(`\n// ${line}\n`);
            includedFiles.add(includePath);
            processFile(includePath);
          }
          continue;
        }
      } else if (!roaringVersion) {
        const match = line.match(ROARING_VERSION_REGEX);
        if (match) {
          roaringVersion = match[1];
          if (!/^[0-9]+\.[0-9]+\.[0-9]+$/.test(roaringVersion)) {
            throw new Error(`Invalid roaring version ${roaringVersion}`);
          }
        }
      }
      output.push(line);
    }
  }

  processFile(path.resolve(CPP_SRC_FOLDER_PATH, "main.cpp"));

  console.log();
  console.log(colors.cyan(`- roaring version ${roaringVersion}`));

  const outputText = output.join("\n");
  console.log(colors.cyanBright(`- ${includedFiles.size} files included. ${outputText.length} bytes total.`));

  return {
    roaringVersion,
    outputText,
  };
};
